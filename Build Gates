import java.io.*;
import java.util.*;

public class BuildGates {

    static boolean[][] farm = new boolean[4005][4005];
    static int N;
    static boolean[][] visited =new boolean[4005][4005];

    static class pair{
        int x, y;
        public pair(int x, int y){
            this.x = x;
            this.y = y;
        }
    }

    static final int[][] dir = {{0, 1},  {0, -1}, {1, 0}, {-1, 0}};
    static void bfs(int x, int y){
        Queue<pair> q = new LinkedList<>();

        q.offer(new pair(x,y ));
        visited[x][y] = true;

        while (q.size()>0){
            pair cur = q.poll();

            for (int i=0; i <4; i++){
                int nx = cur.x+dir[i][0];
                int ny = cur.y+dir[i][1];

                if (nx<0 ||nx>=4005 ||ny<0 ||ny>=4005) continue;

                if (!visited[nx][ny] && !farm[nx][ny]){
                    visited[nx][ny] = true;
                    q.offer(new pair(nx, ny));
                }


            }
        }

    }
    public static void main(String[] args) throws IOException {
        BufferedReader bf = new BufferedReader(new FileReader("gates.in"));
        PrintWriter out = new PrintWriter("gates.out");

        N = Integer.parseInt(bf.readLine());
        String dir = bf.readLine();

        int curX = 2002;
        int curY = 2002;
        farm[2002][2002] = true;
        for (int i=0; i<N; i++){
            char temp = dir.charAt(i);
            int dirX = 0;
            int dirY = 0;

            if (temp=='N'){
                dirX = 1;
            }else if(temp=='S'){
                dirX = -1;
            }else if (temp=='W'){
                dirY = -1;
            }else if (temp=='E'){
                dirY = 1;
            }

            for (int j=0; j<2; j++){
                curX+=dirX;
                curY +=dirY;
                farm[curX][curY] = true;
            }
        }

        int count =0;
        for (int i=0; i<4005; i++){
            for (int j=0; j<4005; j++){
                if (!visited[i][j] && !farm[i][j]) {
                    count++;
                    bfs(i, j);
                }
            }
        }


        out.println(count-1);
        out.close();




   /*     for(int i = 0; i < 30; i++)
        {
            for(int j = 0; j < 30; j++)
            {
                if (farm[i][j]){
                    System.out.print(1+" ");
                }else {
                    System.out.print(0+" ");
                }
            }
            System.out.println();
        }

    */
    }
}
